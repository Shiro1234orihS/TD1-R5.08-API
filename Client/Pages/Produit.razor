@page "/produit"
@using Models

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-icons/1.10.0/font/bootstrap-icons.min.css">
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">

<div class="container mt-5">
    <h3>Visualisation des produits</h3>
    <p>Ce composant permet de récupérer et modifier les données des produits.</p>

    <table class="table table-striped">
        <thead class="table-dark">
            <tr>
                <th>IDProdui</th>
                <th>Nom</th>
                <th>Description</th>
                <th>Marque</th>
                <th>Type de Produit</th>
                <th>Stock Reel</th>
                <th>Stock Min</th>
                <th>Stock Max</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
            @if (produits == null)
            {
                <tr>
                    <td colspan="8" class="text-center">Chargement en cours...</td>
                </tr>
            }
            else if (produits.Count == 0)
            {
                <tr>
                    <td colspan="8" class="text-center">Aucun produit trouvé</td>
                </tr>
            }
            else
            {
                @foreach (var produit in produits)
                {
                    <tr>
                        <td>@produit.IdProduit</td>
                        <td>@produit.NomProduit</td>
                        <td>@produit.Description</td>
                        <td>@produit.IdMarque</td>
                        <td>@produit.IdTypeProduit</td>
                        <td>@produit.StockReel</td>
                        <td>@produit.StockMin</td>
                        <td>@produit.StockMax</td>
                        <td>
                            <!-- Icône d'édition et de suppression -->
                            <button class="btn btn-warning btn-sm" @onclick="() => EditProduct(produit)">
                                <i class="bi bi-pencil"></i> Modifier
                            </button>
                            <button class="btn btn-danger btn-sm" @onclick="() => DeleteProduct(produit.IdProduit)">
                                <i class="bi bi-trash"></i> Supprimer
                            </button>
                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>

    <!-- Modal pour la modification du produit -->
    @if (selectedProduct != null)
    {
        <div class="modal show d-block" tabindex="-1">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Modifier le produit</h5>
                        <button type="button" class="btn-close" @onclick="CloseModal"></button>
                    </div>
                    <div class="modal-body">
                        <form>
                            <div class="mb-3">
                                <label for="nomProduit" class="form-label">Nom du produit</label>
                                <input id="nomProduit" type="text" class="form-control" @bind="selectedProduct.NomProduit" />
                            </div>
                            <div class="mb-3">
                                <label for="description" class="form-label">Description</label>
                                <input id="description" type="text" class="form-control" @bind="selectedProduct.Description" />
                            </div>
                            <div class="mb-3">
                                <label for="stockReel" class="form-label">Stock réel</label>
                                <input id="stockReel" type="number" class="form-control" @bind="selectedProduct.StockReel" />
                            </div>
                            <div class="mb-3">
                                <label for="stockMin" class="form-label">Stock minimum</label>
                                <input id="stockMin" type="number" class="form-control" @bind="selectedProduct.StockMin" />
                            </div>
                            <div class="mb-3">
                                <label for="stockMax" class="form-label">Stock maximum</label>
                                <input id="stockMax" type="number" class="form-control" @bind="selectedProduct.StockMax" />
                            </div>
                        </form>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="CloseModal">Fermer</button>
                        <button type="button" class="btn btn-primary" @onclick="SaveChanges">Sauvegarder</button>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@code {
    private WSProduit ProduitService = new WSProduit();
    private List<Client.Models.Produit> produits;

    private Client.Models.Produit selectedProduct = null;

    // Méthode appelée à l'initialisation du composant pour récupérer les produits
    protected override async Task OnInitializedAsync()
    {
        produits = await ProduitService.GetProduitsAsync("Produits/GetProduits");

        if (produits == null)
        {
            produits = new List<Client.Models.Produit>();
        }
    }

    // Méthode pour ouvrir la modal d'édition
    private void EditProduct(Client.Models.Produit produit)
    {
        selectedProduct = produit;
    }

    // Méthode pour fermer la modal
    private void CloseModal()
    {
        selectedProduct = null;
    }

    // Méthode pour sauvegarder les changements
    private async Task SaveChanges()
    {
        Console.WriteLine(selectedProduct.IdProduit+ "test : " +selectedProduct);
        await ProduitService.EditProduitAsync("Produits/PutProduit", selectedProduct.IdProduit, selectedProduct);
        selectedProduct = null;
        StateHasChanged();  // Rafraîchir la vue
    }

    // Méthode pour supprimer un produit
    private async Task DeleteProduct(int idProduit)
    {
        await ProduitService.DeleteProduitAsync("Produits/DeleteProduit", idProduit);
        produits = await ProduitService.GetProduitsAsync("Produits/GetProduits");
        StateHasChanged();  // Rafraîchir la vue
    }
}
