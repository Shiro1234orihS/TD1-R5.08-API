@page "/NewProduct"
@using Client.Services
@inject NavigationManager Navigation 

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.1.3/css/bootstrap.min.css">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-icons/1.10.0/font/bootstrap-icons.min.css">

<h3 class="mb-4">Ajouter un nouveau produit</h3>

<div class="container">
    <form @onsubmit="OnSubmitProductAsync" @onsubmit:preventDefault="true">
        <div class="mb-3">
            <label for="nomProduit" class="form-label">Nom du produit</label>
            <input id="nomProduit" type="text" class="form-control" placeholder="Entrez le nom du produit" @bind="newProduct.NomProduit" />
        </div>

        <div class="mb-3">
            <label for="description" class="form-label">Description</label>
            <input id="description" type="text" class="form-control" placeholder="Entrez la description du produit" @bind="newProduct.Description" />
        </div>

        <div class="mb-3">
            <label for="nomPhoto" class="form-label">Nom de la photo</label>
            <input id="nomPhoto" type="text" class="form-control" placeholder="Entrez le nom de la photo" @bind="newProduct.NomPhoto" />
        </div>

        <div class="mb-3">
            <label for="uriPhoto" class="form-label">URI de la photo</label>
            <input id="uriPhoto" type="text" class="form-control" placeholder="Entrez l'URI de la photo" @bind="newProduct.UriPhoto" />
        </div>

        <div class="mb-3">
            <label for="idTypeProduit" class="form-label">Choisissez un type de produit</label>
            <select id="idTypeProduit" class="form-select" @bind="newProduct.IdTypeProduit">
                @if (typeProduits == null || typeProduits.Count == 0)
                {
                    <option disabled>Chargement des types de produit...</option>
                }
                else
                {
                    @foreach (var typeProduit in typeProduits)
                    {
                        <option value="@typeProduit.IdTypeProduit">@typeProduit.NomTypeProduit</option>
                    }
                }
            </select>
        </div>

        <div class="mb-3">
            <label for="idMarque" class="form-label">Choisissez une marque</label>
            <select id="idMarque" class="form-select" @bind="newProduct.IdMarque">
                @if (marques == null || marques.Count == 0)
                {
                    <option disabled>Chargement des marques...</option>
                }
                else
                {
                    @foreach (var marque in marques)
                    {
                        <option value="@marque.IdMarque">@marque.NomMarque</option>
                    }
                }
            </select>
        </div>

        <div class="mb-3">
            <label for="stockReel" class="form-label">Stock réel</label>
            <input id="stockReel" type="number" class="form-control" placeholder="Entrez le stock réel" @bind="newProduct.StockReel" />
        </div>

        <div class="mb-3">
            <label for="stockMin" class="form-label">Stock minimum</label>
            <input id="stockMin" type="number" class="form-control" placeholder="Entrez le stock minimum" @bind="newProduct.StockMin" />
        </div>

        <div class="mb-3">
            <label for="stockMax" class="form-label">Stock maximum</label>
            <input id="stockMax" type="number" class="form-control" placeholder="Entrez le stock maximum" @bind="newProduct.StockMax" />
        </div>

        <button type="submit" class="btn btn-primary">Créer un produit</button>
    </form>

    <!-- Affichage des messages d'erreur ou de succès -->
    @if (message != null)
    {
        <div class="alert alert-info mt-3">@message</div>
    }
</div>

@code {
    // Services injectés
    private WSMarque marqueService = new WSMarque();
    private WSTypeProduit typeProduitService = new WSTypeProduit();
    private WSProduit produitService = new WSProduit();

    // Propriétés pour le formulaire
    private List<Client.Models.Marque> marques = new List<Client.Models.Marque>();
    private List<Client.Models.TypeProduit> typeProduits = new List<Client.Models.TypeProduit>();
    private Client.Models.Produit newProduct = new Client.Models.Produit();
    private string message = null;

    // Initialisation des données
    protected override async Task OnInitializedAsync()
    {
        await LoadDataAsync();
    }

    // Charger les marques et les types de produits
    private async Task LoadDataAsync()
    {
        marques = await marqueService.GetMarqueAsync("Marques/GetMarques");
        typeProduits = await typeProduitService.GetMarqueAsync("TypeProduits/GettypeProduits");

        if (marques == null || marques.Count == 0)
        {
            marques = new List<Client.Models.Marque>();
        }
        if (typeProduits == null || typeProduits.Count == 0)
        {
            typeProduits = new List<Client.Models.TypeProduit>();
        }
    }

    // Méthode de soumission du formulaire
    private async Task OnSubmitProductAsync()
    {
        message = null;  // Reset du message

        // Envoyer le produit à l'API via le service WSProduit
        var result = await produitService.PostProduitAsync("Produits/PostProduit", newProduct);
        
        if (result)
        {
            message = "Produit créé avec succès !";
            newProduct = new Client.Models.Produit();  // Réinitialisation du formulaire
            Navigation.NavigateTo("/produit");  // Redirection vers la liste des produits
        }
        else
        {
            message = "Erreur lors de la création du produit. Veuillez réessayer.";
        }
    }
}
